// <auto-generated />
using System;
using LectureSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LectureSystem.Migrations
{
    [DbContext(typeof(LectureSystemDbContext))]
    [Migration("20200301235053_ModifySomeModels-AddStatus")]
    partial class ModifySomeModelsAddStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LectureSystem.Models.Attendances", b =>
                {
                    b.Property<int>("AttendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAttend")
                        .HasColumnType("bit");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AttendId");

                    b.HasIndex("ClassScheduleId")
                        .HasName("fkIdx_154");

                    b.HasIndex("LecturerId")
                        .HasName("fkIdx_250");

                    b.HasIndex("StudentId")
                        .HasName("fkIdx_151");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("LectureSystem.Models.ClassSchedules", b =>
                {
                    b.Property<int>("ClassScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Day")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassScheduleId")
                        .HasName("PK_Teachers");

                    b.HasIndex("ClassroomId")
                        .HasName("fkIdx_78");

                    b.HasIndex("CourseId")
                        .HasName("fkIdx_74");

                    b.ToTable("ClassSchedules");
                });

            modelBuilder.Entity("LectureSystem.Models.Classrooms", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassroomId")
                        .HasName("PK_Classes");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("LectureSystem.Models.CourseScores", b =>
                {
                    b.Property<int>("CourseScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TakeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CourseScoreId");

                    b.HasIndex("ScoreId")
                        .HasName("fkIdx_229");

                    b.HasIndex("TakeId")
                        .HasName("fkIdx_226");

                    b.ToTable("CourseScores");
                });

            modelBuilder.Entity("LectureSystem.Models.Courses", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Curriculum")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SemesterCreditUnit")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CourseId")
                        .HasName("PK_Class");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LectureSystem.Models.Fields", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FieldId");

                    b.HasIndex("CourseId")
                        .HasName("fkIdx_143");

                    b.HasIndex("LecturerId")
                        .HasName("fkIdx_262");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("LectureSystem.Models.Files", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("FilePath")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FileId");

                    b.HasIndex("CourseId")
                        .HasName("fkIdx_160");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("LectureSystem.Models.FinalScores", b =>
                {
                    b.Property<int>("FinalScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("GradePoint")
                        .HasColumnType("float");

                    b.Property<double?>("GradePointAverage")
                        .HasColumnType("float");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("FinalScoreId")
                        .HasName("PK_FinalScore");

                    b.HasIndex("SemesterId")
                        .HasName("fkIdx_204");

                    b.HasIndex("StudentId")
                        .HasName("fkIdx_201");

                    b.ToTable("FinalScores");
                });

            modelBuilder.Entity("LectureSystem.Models.Lecturers", b =>
                {
                    b.Property<int>("LecturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uuid")
                        .HasColumnName("UUID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LecturerId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("LectureSystem.Models.Scores", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alphabet")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("MinScore")
                        .HasColumnType("float");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ScoreId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("LectureSystem.Models.Semesters", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SemesterId")
                        .HasName("PK_Grades");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("LectureSystem.Models.Students", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UUID")
                        .HasColumnName("UUID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LectureSystem.Models.Takes", b =>
                {
                    b.Property<int>("TakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademicYear")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TakeId");

                    b.HasIndex("CourseId")
                        .HasName("fkIdx_167");

                    b.HasIndex("SemesterId")
                        .HasName("fkIdx_177");

                    b.HasIndex("StudentId")
                        .HasName("fkIdx_142");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("LectureSystem.Models.Teaches", b =>
                {
                    b.Property<int>("TeachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TeachId");

                    b.HasIndex("ClassScheduleId")
                        .HasName("fkIdx_220");

                    b.HasIndex("LecturerId")
                        .HasName("fkIdx_253");

                    b.ToTable("Teaches");
                });

            modelBuilder.Entity("LectureSystem.Models.Attendances", b =>
                {
                    b.HasOne("LectureSystem.Models.ClassSchedules", "ClassSchedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassScheduleId")
                        .HasConstraintName("FK_154")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Lecturers", "Lecturer")
                        .WithMany("Attendances")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("FK_250")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Students", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_151")
                        .IsRequired();
                });

            modelBuilder.Entity("LectureSystem.Models.ClassSchedules", b =>
                {
                    b.HasOne("LectureSystem.Models.Classrooms", "Classroom")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_78")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Courses", "Course")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_74")
                        .IsRequired();
                });

            modelBuilder.Entity("LectureSystem.Models.CourseScores", b =>
                {
                    b.HasOne("LectureSystem.Models.Scores", "Score")
                        .WithMany("CourseScores")
                        .HasForeignKey("ScoreId")
                        .HasConstraintName("FK_229");

                    b.HasOne("LectureSystem.Models.Takes", "Take")
                        .WithMany("CourseScores")
                        .HasForeignKey("TakeId")
                        .HasConstraintName("FK_226");
                });

            modelBuilder.Entity("LectureSystem.Models.Fields", b =>
                {
                    b.HasOne("LectureSystem.Models.Courses", "Course")
                        .WithMany("Fields")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_143")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Lecturers", "Lecturer")
                        .WithMany("Fields")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("FK_262")
                        .IsRequired();
                });

            modelBuilder.Entity("LectureSystem.Models.Files", b =>
                {
                    b.HasOne("LectureSystem.Models.Courses", "Course")
                        .WithMany("Files")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_160");
                });

            modelBuilder.Entity("LectureSystem.Models.FinalScores", b =>
                {
                    b.HasOne("LectureSystem.Models.Semesters", "Semester")
                        .WithMany("FinalScores")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_204")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Students", "Student")
                        .WithMany("FinalScores")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_201")
                        .IsRequired();
                });

            modelBuilder.Entity("LectureSystem.Models.Takes", b =>
                {
                    b.HasOne("LectureSystem.Models.Courses", "Course")
                        .WithMany("Takes")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_167")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Semesters", "Semester")
                        .WithMany("Takes")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_177")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Students", "Student")
                        .WithMany("Takes")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_142")
                        .IsRequired();
                });

            modelBuilder.Entity("LectureSystem.Models.Teaches", b =>
                {
                    b.HasOne("LectureSystem.Models.ClassSchedules", "ClassSchedule")
                        .WithMany("Teaches")
                        .HasForeignKey("ClassScheduleId")
                        .HasConstraintName("FK_220")
                        .IsRequired();

                    b.HasOne("LectureSystem.Models.Lecturers", "Lecturer")
                        .WithMany("Teaches")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("FK_253")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
